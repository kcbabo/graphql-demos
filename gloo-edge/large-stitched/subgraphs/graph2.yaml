apiVersion: graphql.gloo.solo.io/v1beta1
kind: GraphQLApi
metadata:
  name: graph2
  namespace: gloo-system
spec:
  executableSchema:
    executor:
      local:
        enableIntrospection: true
        resolutions:
          company_01:
            mockResolver:
              syncResponse:
                name: foo
    schemaDefinition: |
      
      type Address_01 {
        
        address: String

        
        city: String

        
        state: String
      }

      
      type Capsule_01 {
        
        dragon: Dragon_01

        
        id: ID

        
        landings: Int

        
        missions: [CapsuleMission_01]

        
        original_launch: Date

        
        reuse_count: Int

        
        status: String

        
        type: String
      }

      
      type CapsuleMission_01 {
        
        flight: Int

        
        name: String
      }

      
      input CapsulesFind_01 {
        
        id: ID

        
        landings: Int

        
        mission: String

        
        original_launch: Date

        
        reuse_count: Int

        
        status: String

        
        type: String
      }

      
      type Core_01 {
        
        asds_attempts: Int

        
        asds_landings: Int

        
        block: Int

        
        id: ID

        
        missions: [CapsuleMission_01]

        
        original_launch: Date

        
        reuse_count: Int

        
        rtls_attempts: Int

        
        rtls_landings: Int

        
        status: String

        
        water_landing: Boolean
      }

      
      type CoreMission_01 {
        
        flight: Int

        
        name: String
      }

      
      input CoresFind_01 {
        
        asds_attempts: Int

        
        asds_landings: Int

        
        block: Int

        
        id: String

        
        missions: String

        
        original_launch: Date

        
        reuse_count: Int

        
        rtls_attempts: Int

        
        rtls_landings: Int

        
        status: String

        
        water_landing: Boolean
      }

      
      scalar Date

      
      type Distance_01 {
        
        feet: Float

        
        meters: Float
      }

      
      type Dragon_01 {
        
        active: Boolean

        
        crew_capacity: Int

        
        description: String

        
        diameter: Distance_01

        
        dry_mass_kg: Int

        
        dry_mass_lb: Int

        
        first_flight: String

        
        heat_shield: DragonHeatShield_01

        
        height_w_trunk: Distance_01

        
        id: ID

        
        launch_payload_mass: Mass_01

        
        launch_payload_vol: Volume_01

        
        name: String

        
        orbit_duration_yr: Int

        
        pressurized_capsule: DragonPressurizedCapsule_01

        
        return_payload_mass: Mass_01

        
        return_payload_vol: Volume_01

        
        sidewall_angle_deg: Float

        
        thrusters: [DragonThrust_01]

        
        trunk: DragonTrunk_01

        
        type: String

        
        wikipedia: String
      }

      
      type DragonHeatShield_01 {
        
        dev_partner: String

        
        material: String

        
        size_meters: Float

        
        temp_degrees: Int
      }

      
      type DragonPressurizedCapsule_01 {
        
        payload_volume: Volume_01
      }

      
      type DragonThrust_01 {
        
        amount: Int

        
        fuel_1: String

        
        fuel_2: String

        
        pods: Int

        
        thrust: Force_01

        
        type: String
      }

      
      type DragonTrunk_01 {
        
        cargo: DragonTrunkCargo_01

        
        trunk_volume: Volume_01
      }

      
      type DragonTrunkCargo_01 {
        
        solar_array: Int

        
        unpressurized_cargo: Boolean
      }

      
      type Force_01 {
        
        kN: Float

        
        lbf: Float
      }

      
      type HistoriesResult_01 {
        
        data: [History_01]

        
        result: Result_01
      }

      
      type History_01 {
        
        details: String

        
        event_date_unix: Date

        
        event_date_utc: Date

        
        flight: Launch_01

        
        id: ID

        
        links: Link_01

        
        title: String
      }

      
      input HistoryFind_01 {
        
        end: Date

        
        flight_number: Int

        
        id: ID

        
        start: Date
      }

      
      type Info_01 {
        
        ceo: String

        
        coo: String

        
        cto: String

        
        cto_propulsion: String

        
        employees: Int

        
        founded: Int

        
        founder: String

        
        headquarters: Address_01

        
        launch_sites: Int

        
        links: InfoLinks_01

        
        name: String

        
        summary: String

        
        test_sites: Int

        
        valuation: Float

        
        vehicles: Int
      }

      
      type InfoLinks_01 {
        
        elon_twitter: String

        
        flickr: String

        
        twitter: String

        
        website: String
      }

      
      type Landpad_01 {
        
        attempted_landings: String

        
        details: String

        
        full_name: String

        
        id: ID

        
        landing_type: String

        
        location: Location_01

        
        status: String

        
        successful_landings: String

        
        wikipedia: String
      }

      
      type Launch_01 {
        
        details: String

        
        id: ID

        
        is_tentative: Boolean

        
        launch_date_local: Date

        
        launch_date_unix: Date

        
        launch_date_utc: Date

        
        launch_site: LaunchSite_01

        
        launch_success: Boolean

        
        launch_year: String

        
        links: LaunchLinks_01

        
        mission_id: [String]

        
        mission_name: String

        
        rocket: LaunchRocket_01

        
        ships: [Ship_01]

        
        static_fire_date_unix: Date

        
        static_fire_date_utc: Date

        
        telemetry: LaunchTelemetry_01

        
        tentative_max_precision: String

        
        upcoming: Boolean
      }

      
      input LaunchFind_01 {
        
        apoapsis_km: Float

        
        block: Int

        
        cap_serial: String

        
        capsule_reuse: String

        
        core_flight: Int

        
        core_reuse: String

        
        core_serial: String

        
        customer: String

        
        eccentricity: Float

        
        end: Date

        
        epoch: Date

        
        fairings_recovered: String

        
        fairings_recovery_attempt: String

        
        fairings_reuse: String

        
        fairings_reused: String

        
        fairings_ship: String

        
        gridfins: String

        
        id: ID

        
        inclination_deg: Float

        
        land_success: String

        
        landing_intent: String

        
        landing_type: String

        
        landing_vehicle: String

        
        launch_date_local: Date

        
        launch_date_utc: Date

        
        launch_success: String

        
        launch_year: String

        
        legs: String

        
        lifespan_years: Float

        
        longitude: Float

        
        manufacturer: String

        
        mean_motion: Float

        
        mission_id: String

        
        mission_name: String

        
        nationality: String

        
        norad_id: Int

        
        orbit: String

        
        payload_id: String

        
        payload_type: String

        
        periapsis_km: Float

        
        period_min: Float

        
        raan: Float

        
        reference_system: String

        
        regime: String

        
        reused: String

        
        rocket_id: String

        
        rocket_name: String

        
        rocket_type: String

        
        second_stage_block: String

        
        semi_major_axis_km: Float

        
        ship: String

        
        side_core1_reuse: String

        
        side_core2_reuse: String

        
        site_id: String

        
        site_name_long: String

        
        site_name: String

        
        start: Date

        
        tbd: String

        
        tentative_max_precision: String

        
        tentative: String
      }

      
      type LaunchLinks_01 {
        
        article_link: String

        
        flickr_images: [String]

        
        mission_patch: String

        
        mission_patch_small: String

        
        presskit: String

        
        reddit_campaign: String

        
        reddit_launch: String

        
        reddit_media: String

        
        reddit_recovery: String

        
        video_link: String

        
        wikipedia: String
      }

      
      type LaunchRocket_01 {
        
        fairings: LaunchRocketFairings_01

        
        first_stage: LaunchRocketFirstStage_01

        
        rocket: Rocket_01

        
        rocket_name: String

        
        rocket_type: String

        
        second_stage: LaunchRocketSecondStage_01
      }

      
      type LaunchRocketFairings_01 {
        
        recovered: Boolean

        
        recovery_attempt: Boolean

        
        reused: Boolean

        
        ship: String
      }

      
      type LaunchRocketFirstStage_01 {
        
        cores: [LaunchRocketFirstStageCore_01]
      }

      
      type LaunchRocketFirstStageCore_01 {
        
        block: Int

        
        core: Core_01

        
        flight: Int

        
        gridfins: Boolean

        
        land_success: Boolean

        
        landing_intent: Boolean

        
        landing_type: String

        
        landing_vehicle: String

        
        legs: Boolean

        
        reused: Boolean
      }

      
      type LaunchRocketSecondStage_01 {
        
        block: Int

        
        payloads: [Payload_01]
      }

      
      type LaunchSite_01 {
        
        site_id: String

        
        site_name: String

        
        site_name_long: String
      }

      
      type LaunchTelemetry_01 {
        
        flight_club: String
      }

      
      type LaunchesPastResult_01 {
        
        data: [Launch_01]

        
        result: Result_01
      }

      
      type Launchpad_01 {
        
        attempted_launches: Int

        
        details: String

        
        id: ID

        
        location: Location_01

        
        name: String

        
        status: String

        
        successful_launches: Int

        
        vehicles_launched: [Rocket_01]

        
        wikipedia: String
      }

      
      type Link_01 {
        
        article: String

        
        reddit: String

        
        wikipedia: String
      }

      
      type Location_01 {
        
        latitude: Float

        
        longitude: Float

        
        name: String

        
        region: String
      }

      
      type Mass_01 {
        
        kg: Int

        
        lb: Int
      }

      
      type Mission_01 {
        
        description: String

        
        id: ID

        
        manufacturers: [String]

        
        name: String

        
        payloads: [Payload_01]

        
        twitter: String

        
        website: String

        
        wikipedia: String
      }

      
      type MissionResult_01 {
        
        data: [Mission_01]

        
        result: Result_01
      }

      
      input MissionsFind_01 {
        
        id: ID

        
        manufacturer: String

        
        name: String

        
        payload_id: String
      }
      
      scalar ObjectID_01

      
      type Payload_01 {
        
        customers: [String]

        
        id: ID

        
        manufacturer: String

        
        nationality: String

        
        norad_id: [Int]

        
        orbit: String

        
        orbit_params: PayloadOrbitParams_01

        
        payload_mass_kg: Float

        
        payload_mass_lbs: Float

        
        payload_type: String

        
        reused: Boolean
      }

      
      type PayloadOrbitParams_01 {
        
        apoapsis_km: Float

        
        arg_of_pericenter: Float

        
        eccentricity: Float

        
        epoch: Date

        
        inclination_deg: Float

        
        lifespan_years: Float

        
        longitude: Float

        
        mean_anomaly: Float

        
        mean_motion: Float

        
        periapsis_km: Float

        
        period_min: Float

        
        raan: Float

        
        reference_system: String

        
        regime: String

        
        semi_major_axis_km: Float
      }

      
      input PayloadsFind_01 {
        
        apoapsis_km: Float

        
        customer: String

        
        eccentricity: Float

        
        epoch: Date

        
        inclination_deg: Float

        
        lifespan_years: Float

        
        longitude: Float

        
        manufacturer: String

        
        mean_motion: Float

        
        nationality: String

        
        norad_id: Int

        
        orbit: String

        
        payload_id: ID

        
        payload_type: String

        
        periapsis_km: Float

        
        period_min: Float

        
        raan: Float

        
        reference_system: String

        
        regime: String

        
        reused: Boolean

        
        semi_major_axis_km: Float
      }

      type Query {
        
        capsule_01(id: ID!): Capsule_01

        
        capsules_01(find: CapsulesFind_01, limit: Int, offset: Int, order: String, sort: String): [Capsule_01]

        
        capsulesPast_01(find: CapsulesFind_01, limit: Int, offset: Int, order: String, sort: String): [Capsule_01]

        
        capsulesUpcoming_01(find: CapsulesFind_01, limit: Int, offset: Int, order: String, sort: String): [Capsule_01]

        
        company_01: Info_01 @resolve(name: "company_01")

        
        core_01(id: ID!): Core_01

        
        cores_01(find: CoresFind_01, limit: Int, offset: Int, order: String, sort: String): [Core_01]

        
        coresPast_01(find: CoresFind_01, limit: Int, offset: Int, order: String, sort: String): [Core_01]

        
        coresUpcoming_01(find: CoresFind_01, limit: Int, offset: Int, order: String, sort: String): [Core_01]

        
        dragon_01(id: ID!): Dragon_01

        
        dragons_01(limit: Int, offset: Int): [Dragon_01]

        
        histories_01(find: HistoryFind_01, limit: Int, offset: Int, order: String, sort: String): [History_01]

        
        historiesResult_01(find: HistoryFind_01, limit: Int, offset: Int, order: String, sort: String): HistoriesResult_01

        
        history_01(id: ID!): History_01

        
        landpad_01(id: ID!): Landpad_01

        
        landpads_01(limit: Int, offset: Int): [Landpad_01]

        
        launch_01(id: ID!): Launch_01

        
        launchLatest_01(offset: Int): Launch_01

        
        launchNext_01(offset: Int): Launch_01

        
        launches_01(find: LaunchFind_01, limit: Int, offset: Int, order: String, sort: String): [Launch_01]

        
        launchesPast_01(find: LaunchFind_01, limit: Int, offset: Int, order: String, sort: String): [Launch_01]

        
        launchesPastResult_01(find: LaunchFind_01, limit: Int, offset: Int, order: String, sort: String): LaunchesPastResult_01

        
        launchesUpcoming_01(find: LaunchFind_01, limit: Int, offset: Int, order: String, sort: String): [Launch_01]

        
        launchpad_01(id: ID!): Launchpad_01

        
        launchpads_01(limit: Int, offset: Int): [Launchpad_01]

        
        mission_01(id: ID!): Mission_01

        
        missions_01(find: MissionsFind_01, limit: Int, offset: Int): [Mission_01]

        
        missionsResult_01(find: MissionsFind_01, limit: Int, offset: Int): MissionResult_01

        
        payload_01(id: ID!): Payload_01

        
        payloads_01(find: PayloadsFind_01, limit: Int, offset: Int, order: String, sort: String): [Payload_01]

        
        roadster_01: Roadster_01

        
        rocket_01(id: ID!): Rocket_01

        
        rockets_01(limit: Int, offset: Int): [Rocket_01]

        
        rocketsResult_01(limit: Int, offset: Int): RocketsResult_01

        
        ship_01(id: ID!): Ship_01

        
        ships_01(find: ShipsFind_01, limit: Int, offset: Int, order: String, sort: String): [Ship_01]

        
        shipsResult_01(find: ShipsFind_01, limit: Int, offset: Int, order: String, sort: String): ShipsResult_01
      }
      
      type Result_01 {
        
        totalCount: Int
      }

      
      type Roadster_01 {
        
        apoapsis_au: Float

        
        details: String

        
        earth_distance_km: Float

        
        earth_distance_mi: Float

        
        eccentricity: Float

        
        epoch_jd: Float

        
        inclination: Float

        
        launch_date_unix: Date

        
        launch_date_utc: Date

        
        launch_mass_kg: Int

        
        launch_mass_lbs: Int

        
        longitude: Float

        
        mars_distance_km: Float

        
        mars_distance_mi: Float

        
        name: String

        
        norad_id: Int

        
        orbit_type: Float

        
        periapsis_arg: Float

        
        periapsis_au: Float

        
        period_days: Float

        
        semi_major_axis_au: Float

        
        speed_kph: Float

        
        speed_mph: Float

        
        wikipedia: String
      }

      
      type Rocket_01 {
        
        active: Boolean

        
        boosters: Int

        
        company: String

        
        cost_per_launch: Int

        
        country: String

        
        description: String

        
        diameter: Distance_01

        
        engines: RocketEngines_01

        
        first_flight: Date

        
        first_stage: RocketFirstStage_01

        
        height: Distance_01

        
        id: ID

        
        landing_legs: RocketLandingLegs_01

        
        mass: Mass_01

        
        name: String

        
        payload_weights: [RocketPayloadWeight_01]

        
        second_stage: RocketSecondStage_01

        
        stages: Int

        
        success_rate_pct: Int

        
        type: String

        
        wikipedia: String
      }

      
      type RocketEngines_01 {
        
        engine_loss_max: String

        
        layout: String

        
        number: Int

        
        propellant_1: String

        
        propellant_2: String

        
        thrust_sea_level: Force_01

        
        thrust_to_weight: Float

        
        thrust_vacuum: Force_01

        
        type: String

        
        version: String
      }

      
      type RocketFirstStage_01 {
        
        burn_time_sec: Int

        
        engines: Int

        
        fuel_amount_tons: Float

        
        reusable: Boolean

        
        thrust_sea_level: Force_01

        
        thrust_vacuum: Force_01
      }

      
      type RocketLandingLegs_01 {
        
        material: String

        
        number: Int
      }

      
      type RocketPayloadWeight_01 {
        
        id: String

        
        kg: Int

        
        lb: Int

        
        name: String
      }

      
      type RocketSecondStage_01 {
        
        burn_time_sec: Int

        
        engines: Int

        
        fuel_amount_tons: Float

        
        payloads: RocketSecondStagePayloads_01

        
        thrust: Force_01
      }

      
      type RocketSecondStagePayloadCompositeFairing_01 {
        
        diameter: Distance_01

        
        height: Distance_01
      }

      
      type RocketSecondStagePayloads_01 {
        
        composite_fairing: RocketSecondStagePayloadCompositeFairing_01

        
        option_1: String
      }

      
      type RocketsResult_01 {
        
        data: [Rocket_01]

        
        result: Result_01
      }

      
      type Ship_01 {
        
        abs: Int

        
        active: Boolean

        
        attempted_landings: Int

        
        class: Int

        
        course_deg: Int

        
        home_port: String

        
        id: ID

        
        image: String

        
        imo: Int

        
        missions: [ShipMission_01]

        
        mmsi: Int

        
        model: String

        
        name: String

        
        position: ShipLocation_01

        
        roles: [String]

        
        speed_kn: Float

        
        status: String

        
        successful_landings: Int

        
        type: String

        
        url: String

        
        weight_kg: Int

        
        weight_lbs: Int

        
        year_built: Int
      }

      
      type ShipLocation_01 {
        
        latitude: Float

        
        longitude: Float
      }

      
      type ShipMission_01 {
        
        flight: String

        
        name: String
      }

      
      input ShipsFind_01 {
        
        id: ID

        
        name: String

        
        model: String

        
        type: String

        
        role: String

        
        active: Boolean

        
        imo: Int

        
        mmsi: Int

        
        abs: Int

        
        class: Int

        
        weight_lbs: Int

        
        weight_kg: Int

        
        year_built: Int

        
        home_port: String

        
        status: String

        
        speed_kn: Int

        
        course_deg: Int

        
        latitude: Float

        
        longitude: Float

        
        successful_landings: Int

        
        attempted_landings: Int

        
        mission: String
      }

      
      type ShipsResult_01 {
        
        data: [Ship_01]

        
        result: Result_01
      }

      """
      expression to compare columns of type String. All fields are combined with logical 'AND'.
      """
      input String_comparison_exp_01 {
        
        _eq: String

        
        _gt: String

        
        _gte: String

        
        _ilike: String

        
        _in: [String!]

        
        _is_null: Boolean

        
        _like: String

        
        _lt: String

        
        _lte: String

        
        _neq: String

        
        _nilike: String

        
        _nin: [String!]

        
        _nlike: String

        
        _nsimilar: String

        
        _similar: String
      }
      
      type Volume_01 {
        
        cubic_feet: Int

        
        cubic_meters: Int
      }





